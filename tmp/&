#TODO

> Feed 测试: <22-01-21,li> >
> giving icon 测试: <28-01-21, yourname> >
> k8s 部署测试环境: <28-01-21, li> >
> 更新数据库: 更新数据库 <28-01-21, yourname> >

#### skill

- 查找功能相关表，可以直接看 xorm 的 model

#### tag 删除

DELETE /v1/op/gifts/tag/{tag_id}/
删：
url: /v1/op/gifts/tag/{tag_id}/?app=
method: DELETE
resp: ok

**参数** - app:
**返回值** - 无

#### 多礼物配置角标

POST /v1/op/gifts/gifts/tag/{tag_id}

**参数**

- url_params:

  - app
  - tag_id

- post_body

  - ids: [1, 2, 3] //gift_id
  - tag_online_time//timestamp
  - tag_offline_time
  - tag_id
  - tag_country: ["IN","SA"]

**返回值** - 无

#### question

1. api.go 中有 status 不同状态的 func，我新增加了 all 类型，需要在这里添加吗
2. 页面传过来的 status 是数值还是字符串("online","offline")，已解决
3. 数据库表单新增`note` 字段，但是查询的时候没有字段显示
4. 尾灯后台访问不了
5. 数据问题，goods_kind 表的 实体类中的 price
   被删除了，数据库中该字段有一半为 0 值

#### op 后台道具 操作页优化

> 道具/勋章/尾灯/礼物 新增备注功能

- 礼物

  - 更新礼物 POST /v1/op/gifts/{id}/
  - body 新增参数 note
  - 返回 值新增 note

  - 创建礼物 POST /v1/op/gifts/
  - body 新增参数 note
  - 返回 值新增 note

- 道具

  - 更新礼物 POST /v1/op/goods/{id}/
  - body 新增参数 note

  - 创建礼物 POST /v1/op/goods/
  - body 新增参数 note

- 勋章

  - 更新勋章 PUT /v1/medal/{id}/
  - body 新增参数 note

  - 创建勋章 POST /v1/medal/
  - body 新增参数 note

- 尾灯

  - 更新尾灯 PUT /v1/taillight/{id}/
  - body 新增参数 note

  - 创建尾灯 POST /v1/taillight/
  - body 新增参数 note

> 道具新增模糊搜索框

- url /v1/op/goods/

- method GET

  - "app":"funshare"
  - "goods_type":
  - "status": ""，offline/online/all 三种类型，all 是新增的类型
  - "country":
  - "goods_name": "" //新增的模糊搜索参数
  - "low": //价格筛选下限
  - "high": //价格筛选上限

- response

```
"animation":{},
"background_image": "",
"banner_svga": "",
"cartoon":"",
"cartoon_position": "",
"create_time": 1597756104,
"currency": "coin",
"description": ""
"goods_infos": [//1、3、7、15、30 天的价格展示
  {
      "discount_info": [],
      "duration": 1,
      "duration_type": "days",
      "id": 11755,
      "price": 499999
  },
  {
      "discount_info": [],
      "duration": 3,
      "duration_type": "days",
      "id": 11756,
      "price": 1499999
  },
...
],
"id": 616,
"image": "http://static2.miniviapp.com/atlas_op_common_file/1597756025425505.png",
"is_discount": false,
"name": "Fire dragon",
"note": "test11",//新增note字段，显示道具备注信息
"offline_time": 1692364084,
"online_time": 1597756081,
"order": {
     "AF": 0,
     "All": 0,
     "BD": 0,
		 ...
 },
"price": //新增价格字段，显示道具一天内的价格
"status": "online",
"vip": 0
}

```

<++>

> 道具/勋章 新增 All 类型

- 前端改，GET /v1/op/goods/

  - 该请求的 status 字段，新增 "all" 值

- 前端改，GET /v1/medal/
  - 前端传的 status 字段, 将原来的 0,1 改为("online","offline","all")

> 道具新增价格列

- GET /v1/op/goods/

- 新增返回值，price

> 新增价格区间筛选框

- GET /v1/op/goods/
  - 请求参数：
  - low int
  - high int

#### 声音礼物

> 问题：

- 声音礼物样例图和 app 自己后台不一样
  - category 控制
- gift 的 type 字段应用场景(reward → lucky,ticket, rpc,leaderboard → cp)
- gift 的 category(vip,custom,appointment,hot,soft) 和 app 中显示的分类不一致
- CustomizeGift 是什么场景,dao.CreateCustomizedGiftForRooms(session, gift.Id, roomIDs, app)
- order 与 orderScene(name,app,create_time) 应用场景

> 需求分析：

1. 后台，添加字段 ,isVol(bool)；前台，添加 vol_gift(默认为 0)
2. 创建/更新礼物时，获取到 vol_gift 字段为 1(默认为 0)时，获取请求中的 effectiveIcon
   中的信息，写入数据库
3. 查询操作，不需要额外添加控制，直接返回结果
4. 删除操作，若礼物是声音礼物，则修改数据库 isVol 与 effectiveIcon 字段

- 疑问：

  - 需求描述中，角标与声音礼物标识共存，后台通过 isVol 字段判断是声音礼物，两种标识
    共存应该是前端调整，后台需要在角标做其他控制吗
  - 自定义异常信息

> 需求文档

- url v3/gifts/

- method GET
- 请求参数中新增字段

  > 声音礼物 op

- 改动

  - 新增 is_vol(bool)字段
  - 声音礼物角标由 vol_gift_tag 字段表示
  - 声音礼物的声音文件由 effects_icon 字段表示，声音文件格式为 .svga 格式

- 创建礼物

  - url /v1/op/gifts
  - method POST
  - post_body:
    - is_vol: bool //默认 false，为 true 时礼物为声音礼物

- 更新礼物：

  - url /v1/op/gifts/{id}
  - method POST
  - post_body:
    - is_vol: bool //默认 false，为 true 时礼物为声音礼物

- 礼物列表:
  - url /v1/op/gifts/
  - method GET
  - response:
    - 新增 is_vol，
    - 新增 vol_gift_tag//声音角标

#### feed 推送

> 问题：

1. feed 是什么
2. 触发动作，发布成功、评论、点赞，不同状态的动作是在哪里控制,监听的

3. feed 相关 http router

   - togo/main/http_route.go 注册路由 HandleFeedCreateRequest
   - feed.go 中 feed create handler
     - HandleFeedCreateRequest → feedCreateHandler.go 408 line push
     - common/notification/server/kafka.go 处理 topic

4. 参考其他推送基本流程是如下，准备工作??，push 时的方法太复杂，没看懂
   - step1: 创建结构体接收传来的内容
   - step2: 准备工作
   - step3: 定义 notification 结构体
   - step4: version、push(核心)

##### 前端相关页面

- 礼物前端其他请求需要调整显示效果，新增了备注栏

  - "getGiftsOp" GET /v1/op/gifts/
  - "getGiftsByIDOp" POST /v1/op/gifts/gifts/
  - "updateGiftsByTag" POST /v1/op/gifts/gifts/tag/
  - "getGiftOp" GET /v1/op/gifts/{id}

- 道具前端调整，新增备注功能
  - "getGoods" GET /v1/op/goods/

#### op 后台 giving coins 操作/功能 优化 #7437

> question

1. 撤单是直接删除这条记录，还是更新原来的记录
2. 撤单后，撤回的金币如何处理，
   - 发币方：返回官方/币商
   - 用户：记录用户金币(财富)的表不确定是哪张，需要同步更新吗(我觉得需要)
3. user_profile 标记为充值用户有何意义
4. model.TransactionTypeAgent 仅有官方的吗，币商也在
5. 更新 transacton_record 的撤单记录后，需求中描述返回的 cash 需要是负数，

6. 待做，生成退单记录后，用户已经花钱充值的 cash 是否需要退会用户账户

> analysis：

1. 运营根据 trans_id 和 user_id 查找记录

```shell
url /check_user/record/
method: GET
params:
	trans_id:504567
	user_id:29830391
response:
	{
    "cash": 2021,
    "coin": 10,
    "id": 504567,
    "user_id": 29830391
	}
```

- 相关表操作
  - currency type 判断
  - 查询 transaction_record 表
  - 返回 Cash,coin/crystal

2. 运营根据 trans_id 和 user_id 撤单

```shell
url /records/
method: PUT
params:
	"trans_type": "undotransfer",//注意：撤单操作，类型必须是 undotransfer

body:
		{
      "user_id": 29830391,
      "trans_id":504567,
      "currency": "coin",
      "op_user": "",
      "op_user_account":""
     }

response:
		"status": "OK"
```

3. 类型(cause)

| transType                | name             |
| ------------------------ | ---------------- |
| Transfer                 | 转移             |
| RefundRoomUpgrade        | 退款             |
| Compensate               | 补偿             |
| FerrisCompensation       | 摩天轮补偿       |
| UndoTransfer             | 撤销转账         |
| Agent                    | <++>             |
| OfficialReward           | 官方奖励         |
| InviteReward             | 邀请奖励         |
| OpTransferVIP            | <++>             |
| RechargeCoinSeller       | 币商充值         |
| CoinSellerDirectRecharge | 币商银行转账直充 |
| BigUserDirectRecharge    | 大用户转账       |

> 操作的表

| table              | condition             | func                        |
| ------------------ | --------------------- | --------------------------- |
| user_profile       | MarkUserCoinRecharged |                             |
| transaction_record | 流水记录表            | transaction.CreatePayRecord |
| UserAssets         | 用户资产表            | assets.UpdateUserAssets     |
| <++>               | <++>                  |                             |
| <++>               | <++>                  |                             |
| <++>               | <++>                  |                             |

> 撤单功能

- Trans ID，User ID

1. 参数校验
2. 撤单原因替换
3. agent 校验
4. Currency 校验(coin,diamond,...)
5. 疑问：opLogResourceType(log) ,extraOPPayload(map)
6. 是 vip，终止，否则向下走
7. 是否是充值用户
8. (核心 innerUpdateAssetsAndRecording,transaction_record)是否是撤销操作，不是则进行更新(user_assets)，创建新的 transaction_record 记录
9. 是否有 Channel，是则更新 OpTransferRelation
10. 更新 transaction_record

> 新增 币商对应工会信息记录栏

> 转账类型，model.OfficialTransTypes

| name             | type |
| ---------------- | ---- |
| 官方转账         | <++> |
| 奖励             | <++> |
| 补偿             | <++> |
| 币商             | <++> |
| 大用户转账直充   | <++> |
| 币商银行转账直充 | <++> |

（2）不同类型的撤回逻辑
① 官方转账：收回订单金币，若用户现金币不足，则扣成负数
② 奖励：收回订单金币，若用户现金币不足，则扣成负数
③ 补偿：收回订单金币，若用户现金币不足，则扣成负数
④ 币商 credit：收回订单金币，恢复扣除的 credit，若用户现金币不足，则扣成负数（充值报表扣除对应数据）
⑤ 大用户转账直充：收回订单金币，若用户现金币不足，则扣成负数（充值报表扣除对应数据）
⑥ 币商银行转账直充：收回订单金币，若用户现金币不足，则扣成负数（充值报表扣除对应数据）

- assetType(货币类型): coin,crystal,diamond,gold,mix,vip
- transType(转账类型): "agent_transfer", "agent_transfer,transfer",undotransfer

```golang
type TransferOpPayload struct {
	UserID    int64   `json:"user_id"`
	UserIDs   []int64 `json:"user_ids"`
	TransType string  `json:"trans_type"` //转账类型
	Amount    int64   `json:"amount"`//转账数值
	Currency  string  `json:"currency"`//货币类型
	Cash      float32 `json:"cash"`//现金
	CashType  string  `json:"cash_type"`//现金类型
	Cause     string  `json:"cause"`
	OpUser    string  `json:"op_user"`
	Channel   string  `json:"channel"`//机构
	ChannelID string  `json:"channel_id"`//机构id
}

//用户账户状态
type UserProfile struct {
	ID           int64                  `xorm:"pk autoincr 'id'"`
	UserID       int64                  `xorm:"bigint 'user_id'"`
	App          string                 `xorm:"char(10) 'app'"`
	Recharge     bool                   `xorm:"tinyint 'recharge'"`      // 是否充过值
	CoinRecharge bool                   `xorm:"tinyint 'coin_recharge'"` // 是否充值过金币
	BankCard     string                 `xorm:"varchar(32) 'bank_card'"`
	IFSC         string                 `xorm:"varchar(32) ifsc"`
	NameAtBank   string                 `xorm:"varchar(32) name_at_bank"`
	SkuBuyCount  map[string]int         `xorm:"text sku_buy_count"`
	Extra        map[string]interface{} `xorm:"text"`
}

//用户资产
type UserAssets struct {
	ID      int64  `xorm:"pk autoincr 'id'"`
	UserID  int64  `xorm:"bigint 'user_id'"`
	AppName string `xorm:"char(10) 'app'"`
	Coin    int64  `xorm:"bigint 'coin'"`
	Diamond int64  `xorm:"bigint 'diamond'"` // 可提现
	Crystal int64  `xorm:"bigint 'crystal'"`
	Gold    int64  `xorm:"bigint 'gold'"`
}

//更新记录表
type TransactionRecord struct {
	ID       int64              `xorm:"pk autoincr 'id'"`
	UserID   int64              `xorm:"bigint 'user_id'"`
	AppName  string             `xorm:"char(10) 'app'"`
	Type     string             `xorm:"char(20) 'type'"`
	Coin     int64              `xorm:"bigint 'coin'"`
	Diamond  int64              `xorm:"bigint 'diamond'"`
	Crystal  int64              `xorm:"bigint 'crystal'"`
	Currency iapConsts.Currency `xorm:"char(32) currency"`

	SkuIapID string  `xorm:"char(20) 'sku_iap_id'"`//库存量单位，类似与Iphone
	16G，32G，就是两种sku，一个商品可以有多个sku
	Cash     float32 `xorm:"decimal(10,2) 'cash'"`
	CashType string  `xorm:"char(10) 'cash_type'"`
	Gateway  string  `xorm:"char(10) 'gateway'"`
	Payment  string  `xorm:"char(10) 'payment'"`
	EscrowID string  `xorm:"char(50) 'escrow_id'"`//第三方托管id
	Discount float32 `xorm:"decimal(3,2) 'discount'"`

	Status       int                    `xorm:"int 'status'"`
	PurchaseType *int64                 `xorm:"int 'purchase_type'"` // 为空时表示正常用户购买，0表示测试账号购买 和gp订单查询到的信息保持一致
	CreatedAt    time.Time              `xorm:"datetime 'created_at'"`
	TransferID   int64                  `xorm:"bigint(20) 'transfer_id'"`
	Extra        map[string]interface{} `xorm:"text"`

	Gold float64 `xorm:"-"` // user_asset_log 中会出现
}

更新资产：
inapp.go 423 innerPayAssets(PayUndoTransfer) ，返回交易id(trans_id)

- channel 渠道(""或agency(机构))
```

<++>

- 充值报表

> 转账逻辑

> giving coins 新增 公会长 credit

```
https://op-plus.plus.ndog.co/api/funshare/v1/agency/credit-balance/undefined?Signature=OORgbf3aj4%2FKxBapVcu2GaR7SJjxopcn9zUZC4F5d48%3D&ts=1611800838074&app=funshare&type=coin_seller
https://op-plus.plus.ndog.co/api/funshare/v1/agency/credit-balance/35179285?
Signature=h71eKuox%2BMVCq0bh4ZNfmwSX8wtnSOH6441%2BjhKSua4%3D&
ts=1611801459866&
coin_seller_id=35179285&
app=funshare&
type=coin_seller

http --mongo_addr=172.31.18.185:27017
--user_center_backend="ae2d427ccd07411e893fc02c564ef480-acb625e6c210e96b.elb.ap-south-1.amazonaws.com:8090"
--relationship_backend="ae2d427ccd07411e893fc02c564ef480-acb625e6c210e96b.elb.ap-south-1.amazonaws.com:8090"
//noti
http --mongo_addr=172.31.18.185:27017
--user_center_backend="ae2d427ccd07411e893fc02c564ef480-acb625e6c210e96b.elb.ap-south-1.amazonaws.com:8090"
--relationship_backend="ae2d427ccd07411e893fc02c564ef480-acb625e6c210e96b.elb.ap-south-1.amazonaws.com:8090"

```

<++>

gift_id:77 
gift_id:327 
gift_id:81 
gift_id:397 
gift_id:912 
